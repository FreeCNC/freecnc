
-------------------------------------------------------------------------------
General Presentation
-------------------------------------------------------------------------------

* Four space indenting, no tabs.

* Header guards follows the _DIR_FILENAME_EXT convention - _VFS_VFILE_H for
  vfs/vfile.h

* Where applicable, start the file with a comment explaining the contents.
  For headers, place it right after the header guards.

    //
    // Implements various Westwood format decoders
    //

* For big files, seperate each logical grouping with a header.

    //--------------------------------------------------------
    // UnitType
    //--------------------------------------------------------

* In cases where it makes sense, try to keep 80 chars per line.

* C++ style comments should be used for 1 liners. Never use /**/ for single 
  line comments.

* Use PascalCasing for classes, functions enums, and namespaces.

    enum Foo { TEST };
    class FooBar;
    void FooBar(int x);

* Use ALL_UPPER_CASE for defines, enums values and macros (and dont use macros).

    #define VERSION "0.3.0"
    enum {
        RED,
        GREEN,
        BLUE
    };

* Use camelCasing for variables.

    int fooBar;

* Curly braces go on their own lines for namespaces, classes, functions, and 
  on the same line for control-flow statements. 

    class Foo
    {
        ....
    }

    if (foo) {
        ...
    } else {
        ...
    }

* Always use curly braces for control-flow statements.

    if (true) { cout << ..; }
    NOT if (true) cout <<...;

* Simple functions, e.g. return 42, may be kept on a single line.

    int Foo() { return 42; }

* Templates go on their own line.

    template <typename T>
    void Foo(T x);

-------------------------------------------------------------------------------
Classes & Structs
-------------------------------------------------------------------------------

* Use struct only when the object is entirely public, e.g. a stateless functor,
  or pure data.

* Protection level is indented at the same level as the class. Also keep an
  empty line between different protection levels.

* Organise the class in the order of public, protected, private.

* Initializer lists go on their own lines, with the : and one indent level.

* Inheritance goes on the same line as the class name.

* For small inline methods, keeping them in the class definition is okay. For
  big inline methods however, define them below the class itself, in the header.

    class Test : Parent
    {
    public:
        int publicVar;

        Test();            
        Test(const Test &test);
        ~Test();

        Test &operator=(const Test &rhs) { return *this; }

        void DoStuff();

    private:
        Obj a;
        Obj b;
    };

    Test::Test()
        : a(42), b(60)
    {
        ....
    }
